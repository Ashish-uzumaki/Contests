{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"for_loop": {
		"prefix": "fori",
		"body": [
			"for(int i = 0 ; i < n; i++){",
			"}",
		],
		"description": "for loop"
	},
	"vector": {
		"prefix": "vec2",
		"body": [
			"vector<vector<int>>v(n , vector<int>(n, 0));",
		],
		"description": "2d vector"
	},
	"for_double_loop": {
		"prefix": "forij",
		"body": [
			"for(int i = 0 ; i < n; i++){",
				"\tfor(int j = 0; j < m; j++){",
					
				"\t}",
			"}",
		],
		"description": "for double loop"
	},
	"template": {
		"prefix": "template",
		"body": [
			"#include<bits/stdc++.h>",
			"#include<ext/pb_ds/assoc_container.hpp>",
			"#include<ext/pb_ds/tree_policy.hpp>",
			"using namespace __gnu_pbds;",
			"typedef long long ll;",
			"typedef long double lld;",
			"typedef long long int lli;",
			"using namespace std;",
			"const int N = 1000001;",
			"const int MOD = 1e9+7;",
			"const bool DEBUG = 1;",
			"#define sd(x) scanf(\"%d \", &x)",
			"#define sd2(x, y) scanf(\"%d%d\", &x, &y)",
			"#define sd3(x, y, z) scanf(\"%d%d%d\", &x, &y, &z)",
			"#define endl \"\\n\"",
			"#define fi first",
			"#define se second",
			"#define eb emplace_back",
			"#define fbo find_by_order",
			"#define ook order_of_key",
			"#define pb(x) push_back(x)",
			"#define mp(x, y) make_pair(x, y)",
			"#define LET(x, a) __typeof(a) x(a)",
			"#define foreach(it, v) for (LET(it, v.begin()); it != v.end(); it++)",
			"#define MEMS(a, b) memset(a, b, sizeof(a))",
			"#define _\t\t\t\\",
				"\tios_base::sync_with_stdio(false);\t\t\t\\",
				"\tcin.tie(NULL);\t\t\t\\",
				"\tcout.tie(NULL);",
			"#define __\t\t\t\\",
				"\tfreopen(\"input.txt\", \"r\", stdin);\t\t\t\\",
				"\tfreopen(\"output.txt\", \"w\", stdout);",
			"#define all(c) c.begin(), c.end()",
			"#define inf 1000000000000000001",
			"#define epsilon 1e-6",
			"#define int ll",
			"#define RUN_T\t\t\t\\",
				"\tint _t;\t\t\t\\", 			 
				"\tcin >> _t;\t\t\t\\",			 
				"\twhile (_t--)",			 
			"#define tr(...)\t\t\t\\",
			"if (DEBUG) {\t\t\t\\",
			"\tcout << __FUNCTION__ << ' ' << __LINE__ << \" = \";\t\t\t\\",
			"\ttrace(#__VA_ARGS__, __VA_ARGS__);\t\t\t\\",				
			"}",
			"template <typename S, typename T>",
			"ostream &operator<<(ostream &out, pair<S, T> const &p) {",
				"\tout << '(' << p.fi << \", \" << p.se << ')';",
				"\treturn out;",
			"}",
			"template <typename T>",
			"ostream &operator<<(ostream &out, set<T> const &v) {",
				"\tfor (auto i = v.begin(); i != v.end(); i++)",
					"\t\tout << (*i) << ' ';",
				"\treturn out;",
			"}",
			"template <typename T, typename V>",
			"ostream &operator<<(ostream &out, map<T, V> const &v) {",
				"\tfor (auto i = v.begin(); i != v.end(); i++)",
					"\t\tout << \"\\n\" << (i->first) <<  \":\"  << (i->second);",
				"\treturn out;",
			"}",
			"template <typename T, typename V>",
			"ostream &operator<<(ostream &out, unordered_map<T, V> const &v) {",
				"\tfor (auto i = v.begin(); i != v.end(); i++)",
					"\t\tout << \"\\n\" << (i->first) <<  \":\"  << (i->second);",
				"\treturn out;",
			"}",
			"template <typename T>",
			"ostream &operator<<(ostream &out, multiset<T> const &v) {",
				"\tfor (auto i = v.begin(); i != v.end(); i++)",
					"\t\tout << (*i) << ' ';",
				"\treturn out;",
			"}",
			"template <typename T>",
			"ostream &operator<<(ostream &out, unordered_set<T> const &v) {",
				"\tfor (auto i = v.begin(); i != v.end(); i++)",
					"\t\tout << (*i) << ' ';",
				"\treturn out;",
			"}",
			"template <typename T>",
			"ostream &operator<<(ostream &out, unordered_multiset<T> const &v) {",
				"\tfor (auto i = v.begin(); i != v.end(); i++)",
					"\t\tout << (*i) << ' ';",
				"\treturn out;",
			"}",
			"template <typename T> ostream &operator<<(ostream &out, vector<T> const &v) {",
				"\tll l = v.size();",
				"\tfor (ll i = 0; i < l - 1; i++)",
					"\t\tout << v[i] << ' ';",
				"\tif (l > 0)",
					"\t\tout << v[l - 1];",
				"\treturn out;",
			"}",
			"template <typename T> void trace(const char *name, T &&arg1) {",
				"\tcout << name <<  \":\"  << arg1 << endl;",
			"}",
			"template <typename T, typename... Args>",
			"void trace(const char *names, T &&arg1, Args &&... args) {",
				"\tconst char *comma = strchr(names + 1, ',');",
				"\tcout.write(names, comma - names) <<  \":\"  << arg1 <<  \"|\" ;",
				"\ttrace(comma + 1, args...);",
			"}",
			"template <typename T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;",
			"int gcd(int a, int b) {",
			"\t if (b == 0)",
				"\t\t   return a;",
				"\t return gcd(b, a % b);",
			"}",
			"int32_t main(){}",
		],
		"description": "will print the template"
	}
}